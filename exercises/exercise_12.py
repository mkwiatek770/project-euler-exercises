# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# Let us list the factors of the first seven triangle numbers:

#     1: 1
#     3: 1,3
#     6: 1,2,3,6
#    10: 1,2,5,10
#    15: 1,3,5,15
#    21: 1,3,7,21
#    28: 1,2,4,7,14,28

# We can see that 28 is the first triangle number to have over five divisors.

# What is the value of the first triangle number to have over five hundred divisors?

def nth_triangle_number(n):
    return sum((i for i in range(1, n + 1)))

def count_divisors(num):
    if num == 1:
        return 1
    divisors = 2
    for i in range(2, num // 2 + 1):
        if num % i == 0:
            divisors += 1
    return divisors

def find_t_num_with_n_divisors(n):
    i = 1
    highest = 1
    while True:
        i += 1
        divisors = count_divisors(i)
        if divisors > highest:
            highest = divisors

            print(f"{i} -- {divisors}")
        if divisors > n:
            return i

def find_all_prime_nums(num):
    primes = []
    for i in range(2, num):
        is_prime = True
        for j in range(2, i):
            if i % j == 0:
                is_prime = False
        if is_prime:
            primes.append(i)
    return primes


def find_t_num_with_n_divisors1(n):
    start = 1
    for num in find_all_prime_nums(n):
        start *= num
    lowest = n
    i = start
    while True:
        divisible = True
        for div in range(n, 1, -1):
            if i % div != 0:
                divisible = False
                if div < lowest:
                    print(div)
                    lowest = div
                i += start
                break
        if divisible:
            return i
        
if __name__ == "__main__":
    
    print(find_t_num_with_n_divisors(10))
    print(find_t_num_with_n_divisors1(10))
    #print(find_t_num_with_n_divisors(200))
    print(find_t_num_with_n_divisors1(200))

